{"version":3,"sources":["checked.svg","components/Movie.js","components/NominatedCard.js","components/App.jsx","index.js"],"names":["Movie","props","Type","className","list","indexOf","imdbID","length","src","Poster","alt","Title","Year","onClick","nominated","Checked","NominatedCard","useState","title","setTitle","year","setYear","fetch","movieId","then","res","json","data","remnominated","EmptySearch","SearchResults","name","App","movies","setMovies","React","localStorage","getItem","JSON","parse","selected","setSelected","useEffect","setItem","stringify","console","log","LocalState","searchTerm","setSearchTerm","error","setError","handleOnSubmit","e","searchField","document","getElementById","value","Search","Error","preventDefault","addNomination","newSelected","concat","popup","removeNomination","filter","item","Swal","fire","showDenyButton","confirmButtonText","denyButtonText","result","isConfirmed","isDenied","onSubmit","placeholder","type","id","map","movie","index","select","ReactDOM","render"],"mappings":"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","file":"static/js/main.5edd5162.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/checked.08385652.svg\";","import React from 'react';\nimport Checked from \"../checked.svg\";\n\nfunction Movie(props) {\n  if(props.Type == \"movie\") {\n    return (\n      <div className={\"movie \" + (props.list.indexOf(props.imdbID) > -1 ? 'nom ' : 'nothing ') + (props.list.length >= 5 ? 'max' : 'allowed')}>\n        <div className=\"blur\">\n          <img className=\"movie-img\" src={props.Poster != \"N/A\" ? props.Poster : \"https://res.cloudinary.com/people-matters/image/upload/q_auto,f_auto/v1517845732/1517845731.jpg\"} alt={props.Title} />\n          <div className=\"movie-info\">\n            <h3>{props.Title}</h3>\n            <span>{props.Year}</span>\n          </div>\n        </div>\n        <div className=\"nominate-div\">\n          <button className=\"nominate-btn\" onClick={() => props.nominated(props.imdbID)}>Nominate</button>\n        </div>\n        <div className=\"nominate-disabled\">\n          <p>Max nominations reached</p>\n        </div>\n        <img src={Checked} className=\"checked\"/>\n      </div>\n    )\n  } else {\n    return null;\n  }\n}\n\n\nexport default Movie;\n","import React, {useEffect, useState } from 'react';\nconst API = \"https://www.omdbapi.com/?apikey=ef1a2d95&i=\"\n\nfunction NominatedCard(props) {\n  const [title, setTitle] = useState('');\n  const [year, setYear] = useState('');\n\n  fetch(API + props.movieId)\n  .then(res => res.json())\n  .then(data => {\n    setTitle(data.Title);\n    setYear(data.Year)\n  });\n\n  return (\n    <div className=\"card\">\n      <div>\n        <p>{title}</p>\n        <p>{year}</p>\n      </div>\n      <button className=\"remove\" onClick={() => props.remnominated(props.movieId)}>Remove</button>\n    </div>\n\n  )\n}\n\n\nexport default NominatedCard;\n","import React, { useEffect, useState } from 'react';\nimport Movie from './Movie';\nimport NominatedCard from './NominatedCard';\nimport Swal from 'sweetalert2';\nimport \"../index.css\";\n\nconst SEARCH_API = \"https://www.omdbapi.com/?apikey=ef1a2d95&s=\"\n\nfunction EmptySearch() {\n    return <h1>Search a movie to show results..</h1>\n}\nfunction SearchResults(props) {\n    return <h1>Showing results for \"{props.name}\"</h1>\n}\nconst LocalState = list => {\n\n  const [selected, setSelected] = React.useState(\n    localStorage.getItem(list) ? JSON.parse(localStorage.getItem(list)) : []\n  );\n\n  React.useEffect(() => {\n    localStorage.setItem(list, JSON.stringify(selected));\n  }, [selected]);\n\n  console.log(localStorage.getItem(list));\n\n  return [selected, setSelected];\n};\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [selected, setSelected] = LocalState (\n    'list'\n  );\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [error, setError] = useState('');\n\nconst handleOnSubmit = (e) => {\n  const searchField = document.getElementById(\"search\").value;\n  setSearchTerm(searchField);\n\n  if(searchField) {\n    fetch(SEARCH_API + searchField)\n    .then(res => res.json())\n    .then(data => {\n      if(typeof(data.Search) === 'undefined'){\n        setError(data.Error);\n      } else {\n        setMovies(data.Search);\n        setError('');\n      }\n    });\n  }\n\n  e.preventDefault();\n};\n\n\n{/****************  Movie Comp  *****************/}\n\nfunction addNomination(e) {\n  const newSelected = selected.concat(e);\n  setSelected(newSelected);\nif(selected.length == 4) {\n    popup();\n  }\n}\n\nfunction removeNomination(e) {\n  const newSelected = selected.filter((item) => item !== e);\n  setSelected(newSelected);\n}\nfunction popup() {\n   return (\n      Swal.fire({\n        title: 'Do you want to confirm the nominations?',\n        showDenyButton: true,\n        confirmButtonText: `Yes!`,\n        denyButtonText: `Edit List`,\n      }).then((result) => {\n        if (result.isConfirmed) {\n          Swal.fire('Thanks!<br>Your nominations are saved!', 'Submit another response?', 'success')\n          const newSelected = [];\n          setSelected(newSelected);\n          setMovies([]);\n          document.getElementById(\"search\").value = '';\n          setSearchTerm('');\n        } else if (result.isDenied) {\n\n        }\n      })\n   )\n }\n\n  return (\n    <>\n    <header>\n    <h1 className=\"title\">Shopify Awards</h1>\n    <form onSubmit={handleOnSubmit}>\n      <input placeholder=\"Search..\" type=\"search\" className=\"search\" id=\"search\" />\n      <button className=\"search-btn\" onClick={handleOnSubmit}>Search</button>\n    </form>\n    </header>\n\n    <div className=\"main\">\n      <div className=\"left\">\n        <div className=\"results\">\n          {searchTerm.length > 0 && <SearchResults name={searchTerm} />}\n          {searchTerm.length == 0 && <EmptySearch />}\n        </div>\n        {(() => {\n          if(searchTerm.length > 0 && error.length > 0) {\n            return (\n                <>\n                  <p className=\"nom-inst\">{error}</p>\n                  <p className=\"nom-inst\">Search for another movie!</p>\n              </>\n            )\n          } else {\n            return(\n                <div className=\"movie-container\">\n                  {searchTerm.length > 0 && movies.map((movie, index) => <Movie key={index} {...movie} nominated={addNomination} list={selected} /> )}\n                </div>\n            )\n          }\n        })()}\n\n      </div>\n      <div className=\"right\">\n        <h2>Nominations List</h2>\n        {(() => {\n          if(selected.length == 0) {\n            return(\n              <>\n                <p className=\"nom-inst\">Movies you nominated</p>\n                <p className=\"nom-inst\">are displayed here</p>\n              </>\n            )\n          } else if(selected.length == 5){\n            return (\n              <>\n                {selected.length > 0 && selected.map((select, index) => <NominatedCard key={index} remnominated={removeNomination} movieId={select} /> )}\n                {popup}\n              </>\n            )\n          } else {\n            return (\n              <>\n                {selected.length > 0 && selected.map((select, index) => <NominatedCard key={index} remnominated={removeNomination} movieId={select} /> )}\n              </>\n            )\n          }\n        })()}\n      </div>\n    </div>\n  </>\n);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}